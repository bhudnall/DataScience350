discretize
discretize[bin_min < disc && disc <= bin_1_max] <- "low"
discretize[bin_1_max < disc && disc <= bin_2_max] <- "medium"
discretize[bin_2_max < disc && disc <= bin_3_max] <- "high"
discretize
disc <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 24, 25)
range <- max(disc) - min(disc)
binWidth <- range / 3
bin_min <- -Inf
bin_1_max <- min(disc) + binWidth
bin_2_max <- min(disc) + 2*binWidth
bin_3_max <- min(disc) + 3*binWidth
bin_Max <- Inf
discretize <- rep(NA, length(disc))
discretize
discretize[bin_min < disc && disc <= bin_1_max] <- "low"
discretize[bin_1_max < disc && disc <= bin_2_max] <- "medium"
discretize[bin_2_max < disc && disc <= bin_max] <- "high"
discretize
disc <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 24, 25)
range <- max(disc) - min(disc)
binWidth <- range / 3
bin_min <- -Inf
bin_1_max <- min(disc) + binWidth
bin_2_max <- min(disc) + 2*binWidth
bin_3_max <- min(disc) + 3*binWidth
bin_max <- Inf
discretize <- rep(NA, length(disc))
discretize
discretize[bin_min < disc && disc <= bin_1_max] <- "low"
discretize[bin_1_max < disc && disc <= bin_2_max] <- "medium"
discretize[bin_2_max < disc && disc <= bin_max] <- "high"
discretize
disc <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 24, 25)
range <- max(disc) - min(disc)
binWidth <- range / 3
bin_min <- -Inf
bin_1_max <- min(disc) + binWidth
bin_2_max <- min(disc) + 2*binWidth
bin_3_max <- min(disc) + 3*binWidth
bin_max <- Inf
discretize <- rep(NA, length(disc))
discretize
binWidth
bin_min
bin_max
bin_1_max
bin_2_max
bin_3_max
disc <- c(81, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 12, 23, 24, 25)
range <- max(disc) - min(disc)
binWidth <- range / 3
bin_min <- -Inf
bin_1_max <- min(disc) + binWidth
bin_2_max <- min(disc) + 2*binWidth
bin_3_max <- min(disc) + 3*binWidth
bin_max <- Inf
discretize <- rep(NA, length(disc))
discretize
discretize[bin_min < disc & disc <= bin_1_max] <- "low"
discretize[bin_1_max < disc & disc <= bin_2_max] <- "medium"
discretize[bin_2_max < disc & disc <= bin_max] <- "high"
discretize
bin_2_max
bin_1_max
sort(disc)
length(disc)
length(disc)/3
sort(disc)
length(disc)/3
low_max <- 9
# [1]  3  3  4  4  5  5  5  5  5  5  5  6  6  6  6  6  7  7  7  7  8  8  9 12 23 24 25 81
#    <---------------------------------|-------------------------|---------------------->
# lowMax = 5
# midmax = 7
# highmax = 81
low_max <- 5
mid_max <- 7
high_max <- 81
discretize_equal <- rep(NA, length(disc))
discretize_equal
discretize_equal[bin_min < disc & disc <= low_max] <- "low"
discretize_equal[low_max < disc & disc <= mid_max] <- "medium"
discretize_equal[mid_max < disc & disc <= high_max] <- "high"
discretize_equal
table(discretize_equal)
discretize_equal
##3 download the patient dataset
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00225/Indian%20Liver%20Patient%20Dataset%20(ILPD).csv" # Copy this url carefully
ILPD <- read.csv(url, header=FALSE, stringsAsFactors=FALSE)
##4 load the headers into a vector
headers <- c('Age', 'Gender', 'TB', 'DB', 'Alkphos', 'Sgpt', 'Sgot', 'TP', 'ALB', 'AG_Ratio', 'Selector')
names(ILPD) <- headers
##5 review first 6 rows
head(ILPD)
# Quiz05a_Classification.R
# Copyright Ernst Henle 2016
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
url <- "https://www.dropbox.com/s/6h3fj8u8ew9i21f/PatientReadmission.csv?dl=1" # PatientReadmission.csv
Patients <- read.csv(url, header=TRUE, stringsAsFactors=TRUE)
formulaClass <- Readmitted ~ .
# Partition the data
fractionOfTest=0.25
set.seed(2)
randoms <- runif(nrow(Patients))
cutoff <- quantile(randoms, fractionOfTest)
testFlag <- randoms <= cutoff
testingData <- Patients[testFlag, ]
trainingData <- Patients[!testFlag, ]
# Get Package
reposURL <- "http://cran.rstudio.com/"
if (!require("randomForest")) {install.packages("randomForest", dep=TRUE, repos=reposURL)} else {" randomForest is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(randomForest)
if (!require("nnet")) {install.packages("nnet", dep=TRUE, repos=reposURL)} else {" nnet is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(nnet)
if (!require("rpart")) {install.packages("rpart", dep=TRUE, repos=reposURL)} else {" rpart is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(rpart)
# Q4:  What is d2?  The following lines of code create a neural net model, a random forrest, and a descision tree model.
set.seed(4)
Model.NN <- nnet(formula=formulaClass, data=d2, size=10, maxit=200)
Model.RF <- randomForest(formula=formulaClass, data=d2)
Model.DT <- rpart(formula=formulaClass, data=d2)
# Q5:  What is d1? The following lines of code create probabilities from three different models.  These probabilities will be used to test the accuracy of their respectives models.
probabilities.NN <- predict(Model.NN, newdata=d1, type="raw")
probabilities.RF <- predict(Model.RF, newdata=d1, type="prob")[,2]
probabilities.DT <- predict(Model.DT, newdata=d1, type = "prob")[,2]
View(Patients)
# Quiz05a_Classification.R
# Copyright Ernst Henle 2016
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
url <- "https://www.dropbox.com/s/6h3fj8u8ew9i21f/PatientReadmission.csv?dl=1" # PatientReadmission.csv
Patients <- read.csv(url, header=TRUE, stringsAsFactors=TRUE)
formulaClass <- Readmitted ~ .
# Partition the data
fractionOfTest=0.25
set.seed(2)
randoms <- runif(nrow(Patients))
cutoff <- quantile(randoms, fractionOfTest)
testFlag <- randoms <= cutoff
testingData <- Patients[testFlag, ]
trainingData <- Patients[!testFlag, ]
# Get Package
reposURL <- "http://cran.rstudio.com/"
if (!require("randomForest")) {install.packages("randomForest", dep=TRUE, repos=reposURL)} else {" randomForest is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(randomForest)
if (!require("nnet")) {install.packages("nnet", dep=TRUE, repos=reposURL)} else {" nnet is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(nnet)
if (!require("rpart")) {install.packages("rpart", dep=TRUE, repos=reposURL)} else {" rpart is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(rpart)
# Q4:  What is d2?  The following lines of code create a neural net model, a random forrest, and a descision tree model.
set.seed(4)
Model.NN <- nnet(formula=formulaClass, data=trainingData, size=10, maxit=200)
Model.RF <- randomForest(formula=formulaClass, data=trainingData)
Model.DT <- rpart(formula=formulaClass, data=trainingData)
# Q5:  What is d1? The following lines of code create probabilities from three different models.  These probabilities will be used to test the accuracy of their respectives models.
probabilities.NN <- predict(Model.NN, newdata=testingData, type="raw")
probabilities.RF <- predict(Model.RF, newdata=testingData, type="prob")[,2]
probabilities.DT <- predict(Model.DT, newdata=testingData, type = "prob")[,2]
probabilities.RF
threshold <- 0.3
predicted_RF <- ifelse(probabilities.RF > threshold, "Attend", "NotAttend")
print(table(predicted_RF, actual, dnn=c("Predicted", "Actual")))
View(Patients)
actual <- Patients[,"actual"]
View(Patients)
actual <- Patients[,1]
actual
threshold <- 0.3
actual <- Patients[,1]
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual, dnn=c("Yes", "No")))
actual <- c(Patients[,1])
actual
names(Patients)
actual <- ifelse(Patients$Readmitted, "Yes", "No")
Patients$Readmitted
actual <- ifelse(Patients$Readmitted, "Yes", "No")
actual <- ifelse(Patients$Readmitted == "Yes", "Yes", "No")
actual
probabilities.RF
threshold <- 0.3
actual <- ifelse(Patients$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual, dnn=c("Yes", "No")))
length(predicted_RF)
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
predicted_RF
length(predicted_RF)
print(table(predicted_RF, actual, dnn=c("Yes", "No")))
threshold <- 0.3
actual <- ifelse(Patients$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual, dnn=c("Yes", "No")))
View(Patients)
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
predicted_RF
actual
length(actual)
length(predicted_RF)
actual <- Patients$Readmitted
actual
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual, dnn=c("Yes", "No")))
actual <- ifelse(Patients$Readmitted == "Yes", "Yes", "No")
class(actual)
class(predicted_RF)
print(table(predicted_RF, actual, dnn=c("Yes", "No")))
probabilities.RF
predicted_RF
table(predicted_RF)
table(predicted_RF, actual)
length(probabilities.RF)
# Quiz05a_Classification.R
# Copyright Ernst Henle 2016
# Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
url <- "https://www.dropbox.com/s/6h3fj8u8ew9i21f/PatientReadmission.csv?dl=1" # PatientReadmission.csv
Patients <- read.csv(url, header=TRUE, stringsAsFactors=TRUE)
formulaClass <- Readmitted ~ .
# Partition the data
fractionOfTest=0.25
set.seed(2)
randoms <- runif(nrow(Patients))
cutoff <- quantile(randoms, fractionOfTest)
testFlag <- randoms <= cutoff
testingData <- Patients[testFlag, ]
trainingData <- Patients[!testFlag, ]
# Get Package
reposURL <- "http://cran.rstudio.com/"
if (!require("randomForest")) {install.packages("randomForest", dep=TRUE, repos=reposURL)} else {" randomForest is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(randomForest)
if (!require("nnet")) {install.packages("nnet", dep=TRUE, repos=reposURL)} else {" nnet is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(nnet)
if (!require("rpart")) {install.packages("rpart", dep=TRUE, repos=reposURL)} else {" rpart is already installed "}
# Now that the package is installed, we want to load the package so that we can use its functions
library(rpart)
# Q4:  What is d2?  The following lines of code create a neural net model, a random forrest, and a descision tree model.
set.seed(4)
Model.NN <- nnet(formula=formulaClass, data=trainingData, size=10, maxit=200)
Model.RF <- randomForest(formula=formulaClass, data=trainingData)
Model.DT <- rpart(formula=formulaClass, data=trainingData)
# Q5:  What is d1? The following lines of code create probabilities from three different models.  These probabilities will be used to test the accuracy of their respectives models.
probabilities.NN <- predict(Model.NN, newdata=testingData, type="raw")
probabilities.RF <- predict(Model.RF, newdata=testingData, type="prob")[,2]
probabilities.DT <- predict(Model.DT, newdata=testingData, type = "prob")[,2]
threshold <- 0.3
actual <- ifelse(Patients$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual), dnn=c("Yes", "No")))
print(table(predicted_RF, actual), dnn=c("Yes", "No"))
threshold <- 0.3
actual <- ifelse(TestingData$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual), dnn=c("Yes", "No"))
actual <- ifelse(testingData$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.RF > threshold, "Yes", "No")
print(table(predicted_RF, actual), dnn=c("Yes", "No"))
(793 + 360) / (793 + 184 + 98 + 360)
threshold <- 0.7
actual <- ifelse(testingData$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.NN > threshold, "Yes", "No")
print(table(predicted_RF, actual), dnn=c("Yes", "No"))
(922 + 194)/(922 + 55 + 264 + 194)
threshold <- 0.7
actual <- ifelse(testingData$Readmitted == "Yes", "Yes", "No")
predicted_RF <- ifelse(probabilities.NN > threshold, "Yes", "No")
print(table(predicted_RF, actual), dnn=c("Yes", "No"))
85/(85 + 3)
7/(5 + 7)
(85 + 7)/(90 + 10)
85/(85 5)
85/(85 + 5)
85/(85 + 3)
7/(7 + 5)
85/(3 + 85)
(7 + 85)/(90 + 10)
7/(7 + 5)
7/(7 + 3)
7/(7 + 5)
7/(7 + 5)
85/(3 + 85)
(7 + 85)/(90 + 10)
7/(7 + 3)
7/(7 + 5)
1/(1 + 3)
2/(2 + 3)
2/(2 + 4)
2/(2 + 1)
3/(3 + 1)
# ClassificationAccuracy.R
# Copyright 2016 by Ernst Henle
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
# A Classification is tested on 1000 cases.  In the
# approximate middle of its ROC chart there is a point
# where the false positive rate is 0.4, the true
# positive rate is 0.8, and the accuracy is  0.7.
# What does the confusion matrix look like?
# Problem statement
# I   A Classification is tested on 1000 cases.
# II  The false positive rate is 0.4
# III The true positive rate is 0.8.
# IV  The accuracy is 0.7.
# Problem statement expressed using TP, FP, FN, TN
# I   N = TP + FP + FN + TN   = 1000
# II  FPR = FP/(FP + TN) = 0.4
# III TPR = TP/(TP + FN) = 0.8
# IV  (TP + TN)/(TP + FP + FN + TN) = 0.7
# Problem statement expressed as linear equations
# I    1*TP + 1*FP + 1*FN + 1*TN  = 1000
# II	 0*TP + 3*FP + 0    - 2*TN  = 0
# III	 1*TP + 0    - 4*FN + 0     = 0
# IV	-3*TP + 7*FP + 7*FN - 3*TN  = 0
# Problem statement expressed in terms of linear algebra:
# We want to solve the linear equation:  Ax = b
# Where:
#     A is the matrix
#     x is a vector of TP, FP, FN, TN
#     b is the right-hand side of the linear equation
# --------------    --------
#   matrix A        vector b
# --------------    --------
# TP  FP  FN  TN  | b
# --------------    --------
#  1   1   1   1  | 1000
#  0   3   0  -2  | 0
#  1   0  -4   0  | 0
# -3   7   7  -3  | 0
# --------------    --------
?solve
# A %*% x = b; x <- solve(A, b)
# inv(A) %*% b = x; x <- solve(A) %*% b
# Construct the matrix
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c( 0,  3,  0, -2) # II
r3 <- c( 1,  0, -4,  0) # III
r4 <- c(-3,  7,  7, -3) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
b <- c(1000, 0, 0, 0)
# Solve the equation:
?solve
x <- solve(A, b)
names(x) <- c('TP', 'FP', 'FN', 'TN')
print(x)
TP <- 400
FP <- 200
FN <- 100
TN <- 300
TP/(TP + FP)
3/(3 + 1)
2/(2 + 1)
# PregnancyExercise.R
# Copyright 2016 by Ernst Henle
#Clear Workspace
rm(list=ls())
# Clear Console:
cat("\014")
# A pregnancy test correctly predicted pregnancy 80%
# of the time among pregnant women.  10% of all the
# women were predicted pregnant but were actually not
# pregnant. The accuracy of the test was 89%.
# Problem statement
# I  Always:  1TP + 1FP + 1FN + 1TN = 1
# II	 Recall :  TP / (TP + FN) = 0.80;  -2TP+ 0FP + 8FN + 0TN = 0
# III	Accuracy:  (TP + TN)/(TP + FP + TN + FN) = 0.89;  1TP + 0FP + 0FN + 1TN =  0.89
# IV	False Positive:  FP = 0.1; 0TP + 1FP + 0FN + 0TN = 0.1
# Problem statement expressed in terms of linear algebra:
# We want to solve the linear equation:  Ax = b
# Where:
#     A is the matrix
#     x is a vector of TP, FP, FN, TN
#     b is the right-hand side of the linear equation
# --------------    --------
#   matrix A        vector b
# --------------    --------
# TP  FP  FN  TN  | b
# --------------    --------
#  1   1   1   1  |	1
# -2   0   8   0	|	0
#  1   0   0   1	|	0.89
#  0   1   0   0	|	0.1
# --------------    --------
?solve
# A %*% x = b; x <- solve(A, b)
# inv(A) %*% b = x; x <- solve(A) %*% b
# Construct the matrix
#       TP  FP  FN  TN
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
b <- c()
# Solve the equation:
?solve
r1 <- c( 1,  1,  1,  1) # I
r2 <- c(-2,  0,  8,  0) # II
r3 <- c( 1,  0,  0,  1) # III
r4 <- c( 0,  1,  0,  0) # IV
A = matrix(c(r1,r2,r3,r4), ncol=4, byrow=TRUE)
# The right-hand side of the linear system:
# Add code here
b <- c(1, 0, 0.89, 0.1)
# Solve the equation:
?solve
x <- solve(A, b)
names(x) <- c('TP', 'FP', 'FN', 'TN')
print(x)
tp <- 0.04
fp <- 0.10
fn <- 0.01
tn <- 0.85
tp/(tp + fp)
library(readr)
library(GGally)
library(dplyr)
## set the working directory
setwd(choose.dir())
## load in the data set
auto_data <- read_csv("Automobile price data _Raw_.csv")
## see the top rows in the data set
head(auto_data)
## clean up the colnames
colnames(auto_data) <- gsub("-","_", names(auto_data))
## Display the characteristics of each field
str(auto_data)
## There are 205 obs. of  26 variables
## There are many chr variables, might want to convert to dummy
## what are the variables with int or num?
fields <- c("bore", "stroke", "price")
auto_data[, fields] <- lapply(auto_data[, fields], as.numeric)
auto_data <- na.omit(auto_data)
## remove symboling, normalized_losses, and make
auto_data_slim <- select(auto_data
, -symboling
, -normalized_losses
, -make)
## check fields again -- everything converted properly
str(auto_data)
str(auto_data_slim)
## run summary stat function, and find the variance of each numeric field
summary(auto_data)
numeric_fields <- sapply(auto_data, is.numeric)
auto_data_num <- auto_data[,numeric_fields]
## Variance
lapply(auto_data_num, var)
## Standard Deviation
sapply(auto_data_num, sd)
## Correlation Grid
cor(auto_data_num)
## Which outcome variables have the highest correlation with different features?
# Specific Outcomes:
#         city-mpg
#         highway-mpg
#         horsepower
#         price
## Run Regression models for these outcome variables
city_mpg_frame <- select(auto_data_slim, -highway_mpg)
city_mpg_lm <- lm(city_mpg ~ ., city_mpg_frame)
summary(city_mpg_lm)
highway_mpg_frame <- select(auto_data_slim, -city_mpg)
highway_mpg_lm <- lm(highway_mpg ~ ., highway_mpg_frame)
summary(highway_mpg_lm)
hp_lm <- lm(horsepower ~ ., auto_data_slim)
summary(hp_lm)
price_lm <- lm(price ~ ., auto_data_slim)
summary(price_lm)
## scatter plot matrix
## Filter down to specific variables for a pairs plot
auto_data_cor <- select(auto_data
, curb_weight
, horsepower
, engine_size
, length
, compression_ratio
, price
, body_style)
## What are the counts of body style?
table(auto_data$body_style)
## plot the distributions and correlations with
## these variables.
ggpairs(auto_data_cor
, lower=list(continuous = "smooth")
, upper=list(params=list(corSize=5)), axisLabels='show'
, colour = 'body_style')
View(auto_data)
table(auto_data$fuel_system)
head(mtcards)
head(mtcars)
table(auto_data$make)
